---
# template source: https://github.com/bretfisher/docker-build-workflow/blob/main/templates/call-docker-build.yaml
name: Docker Build

on:
  push:
    branches:
      - main
    # don't rebuild image if someone only edited unrelated files
    paths-ignore:
      - 'README.md'
      - '.github/linters/**'
  pull_request:
    # don't rebuild image if someone only edited unrelated files
    paths-ignore:
      - 'README.md'
      - '.github/linters/**'
  schedule:
    # re-run montly to keep image fresh with upstream base images
    - cron: '0 12 15 * *'


jobs:

  ### 23/01/2023 : build-image action added to gitHub actions as a test.........
  build-image:
    name: Build Image
    runs-on: ubuntu-latest

#NEW: (START) : Write on pull requests
    permissions:
      pull-requests: write # needed to create and update comments in PRs
#NEW: (END) ############################################################    
    
    steps:

#NEW: (START) : Set's up system emulator
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
#NEW: (END) ############################################################

#NEW: (START) : Buildx is for building new Docker images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
#NEW: (END) ############################################################

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

#NEW: (START) : Smoke test deployment in k3d Kubernetes
      - name: Login to ghcr.io registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push to GHCR
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/bretfisher/allhands22:${{ github.run_id }}
          target: test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "test-cluster-1"
          args: >-
            --agents 1
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"

      - name: Smoke test deployment in k3d Kubernetes
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=https://ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }}
          export TESTING_IMAGE=ghcr.io/bretfisher/allhands22:"$GITHUB_RUN_ID"
          envsubst < manifests/deployment.yaml  | kubectl apply -f -
          kubectl rollout status deployment myapp
          kubectl exec deploy/myapp -- curl --fail localhost
#NEW: (END) ############################################################

#NEW: (START) : Add Unit Test
      - name: Build and export to Docker
        uses: docker/build-push-action@v2
        with:
          push: false
          load: true # Export to Docker Engine rather than pushing to a registry
          tags: ${{ github.run_id }}
          target: test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

        # for simple tests (npm test, etc.) just run a local image in docker
      - name: Unit Testing in Docker
        run: |
          docker run --rm ${{ github.run_id }} echo "run test commands here"
#NEW: (END) ############################################################

#NEW: (START) : Add tags with to image
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: bretfisher/allhands22
          flavor: |
            latest=false
          tags: |
            type=raw,value=04
            type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
            type=ref,event=pr
            type=ref,event=branch
            type=semver,pattern={{version}}
#NEW: (END) ############################################################

      - name: Docker build
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: bretfisher/allhands22:latest,bretfisher/allhands22:01

#NEW: (START) Do this on a push or pull request
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
#NEW: (END) ############################################################

#NEW: (START) : Caching is utilised so docker images can be built quicker!
          cache-from: type=gha
          cache-to: type=gha,mode=max
#NEW: (END) ############################################################

#NEW: (START) : List of images to choose from on docker hub!
          platforms: linux/amd64,linux/arm64,linux/arm/v7
#NEW: (END) ############################################################

#NEW: (START) : Add CVE Scan
      - name: Run Trivy for all CVEs (non-blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.run_id }}
          exit-code: 0
          format: table
#NEW: (END) ############################################################

#NEW: (START) Run CVE Scan advanced
      - name: Run Trivy for HIGH,CRITICAL CVEs and report (blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.run_id }}
          exit-code: 1
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
#NEW: (END) ############################################################

#NEW: (START) : On a pull request put image tags in 
        # If PR, put image tags in the PR comments
        # from https://github.com/marketplace/actions/create-or-update-comment
      - name: Find comment for image tags
        uses: peter-evans/find-comment@v1
        if: github.event_name == 'pull_request'
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Docker image tag(s) pushed

        # If PR, put image tags in the PR comments
      - name: Create or update comment for image tags
        uses: peter-evans/create-or-update-comment@v1
        if: github.event_name == 'pull_request'
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Docker image tag(s) pushed:
            ```text
            ${{ steps.docker_meta.outputs.tags }}
            ```

            Labels added to images:
            ```text
            ${{ steps.docker_meta.outputs.labels }}
            ```
          edit-mode: replace
#NEW: (END) ############################################################


  call-docker-build:

    name: Call Docker Build

    uses: bretfisher/docker-build-workflow/.github/workflows/reusable-docker-build.yaml@main

    permissions:
      contents: read
      packages: write # needed to push docker image to ghcr.io
      pull-requests: write # needed to create and update comments in PRs
    
    secrets:

      # Only needed if with:dockerhub-enable is true below
      # https://hub.docker.com/settings/security
      dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}
      dockerhub-token: ${{ secrets.DOCKERHUB_TOKEN }}

    with:
      
      ### REQUIRED
      ### ENABLE ONE OR BOTH REGISTRIES
      ### tell docker where to push.
      ### NOTE if Docker Hub is set to true, you must set secrets above and also add account/repo/tags below
      dockerhub-enable: true
      ghcr-enable: true

      ### A list of the account/repo names for docker build. List should match what's enabled above
      ### defaults to:
      #image-names: |
        #${{ github.repository }}
        #ghcr.io/${{ github.repository }}

      ### set rules for tagging images, based on special action syntax:
      ### https://github.com/docker/metadata-action#tags-input
      ### defaults to:
      #tag-rules: |
        #type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
        #type=raw,value=stable-{{date 'YYYYMMDDHHmmss'}},enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
        #type=ref,event=pr
        #type=ref,event=branch
        #type=raw,value=gha-${{ github.run_id }}
      
      ### path to where docker should copy files into image
      ### defaults to root of repository (.)
      # context: .
      
      ### Dockerfile alternate name. Default is Dockerfile (relative to context path)
      # file: Containerfile

      ### build stage to target, defaults to empty, which builds to last stage in Dockerfile
      # target:
      
      ### platforms to build for
      ### defaults to linux/amd64
      ### other options: linux/amd64,linux/arm64,linux/arm/v7
      #platforms: linux/amd64,linux/arm64
      
      ### Create a PR comment with image tags and labels
      ### defaults to true
      # comment-enable: false
      